// SectionRows.test.tsx

// Unit tests for SectionRows component
// Generated by ChatGPT-4, OpenAI

import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom';
import { SectionRows, ISectionRows } from '../SectionRows';
import { Course } from '../../../canvas/course';
import { IProfile } from '../../../canvas/profile';
import {IUserData} from "../../../canvas/canvasDataDefs";
import {mockUserData} from "../../../canvas/__mocks__/mockUserData";

jest.mock('../CourseRow', () => ({
    CourseRow: jest.fn(({ course, onSelectSection }) => <div onClick={() => onSelectSection(course)}>PublishCourseRow: {course.id}</div>),
}));



const mockCourses: Course[] = [
    { id: 1, name: 'Course 1' } as Course,
    { id: 2, name: 'Course 2' } as Course,
];

const mockInstructorsByCourseId = {
    1: [{...mockUserData, id: 1, name: 'Instructor 1' } as IUserData],
    2: [{...mockUserData, id: 2, name: 'Instructor 2' } as IUserData],
};

const mockFrontPageProfilesByCourseId = {
    1: { id: 1, name: 'Profile 1' } as IProfile,
    2: { id: 2, name: 'Profile 2' } as IProfile,
};

const mockPotentialProfilesByCourseId = {
    1: [{ id: 1, name: 'Potential Profile 1' } as IProfile],
    2: [{ id: 2, name: 'Potential Profile 2' } as IProfile],
};

const mockErrorsByCourseId = {
    1: ['Error 1'],
    2: ['Error 2'],
};

const mockSetWorkingSection = jest.fn();
const mockOnOpenAll = jest.fn();

const renderComponent = (props: Partial<ISectionRows> = {}) => {
    const defaultProps: ISectionRows = {
        sections: mockCourses,
        instructorsByCourseId: mockInstructorsByCourseId,
        frontPageProfilesByCourseId: mockFrontPageProfilesByCourseId,
        potentialProfilesByCourseId: mockPotentialProfilesByCourseId,
        errorsByCourseId: mockErrorsByCourseId,
        setWorkingSection: mockSetWorkingSection,
        onOpenAll: mockOnOpenAll,
        ...props,
    };

    return render(<SectionRows {...defaultProps} />);
};

describe('SectionRows Component', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });

    it('renders without crashing', () => {
        renderComponent();
        expect(screen.getByText(/Code/)).toBeInTheDocument();
        expect(screen.getByText(/Name on Front Page/)).toBeInTheDocument();
        expect(screen.getByText(/Instructor\(s\)/)).toBeInTheDocument();
    });

    it('renders the correct number of PublishCourseRow components', () => {
        renderComponent();
        expect(screen.getAllByText(/PublishCourseRow:/)).toHaveLength(mockCourses.length);
    });

    it('calls onOpenAll when "Open All" is clicked', () => {
        renderComponent();
        fireEvent.click(screen.getByText(/Open All/));
        expect(mockOnOpenAll).toHaveBeenCalled();
    });

    it('passes correct props to PublishCourseRow components', () => {
        renderComponent();
        mockCourses.forEach(course => {
            expect(screen.getByText(`PublishCourseRow: ${course.id}`)).toBeInTheDocument();
        });
    });

    it('calls setWorkingSection with the correct course when a PublishCourseRow is clicked', () => {
        renderComponent();
        mockCourses.forEach(course => {
            const courseRow = screen.getByText(`PublishCourseRow: ${course.id}`);
            fireEvent.click(courseRow);
            expect(mockSetWorkingSection).toHaveBeenCalledWith(course);
        });
    });
});
