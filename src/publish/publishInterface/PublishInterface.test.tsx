import {mockCourseData} from "../../canvas/course/__mocks__/mockCourseData";

//Generated by ChatGPT 3.5

// PublishInterface.test.tsx
global.TextEncoder = require('util').TextEncoder;

import React from 'react';
import {render, screen, fireEvent, waitFor} from '@testing-library/react';
import '@testing-library/jest-dom';
import { PublishInterface, IPublishInterfaceProps } from './PublishInterface';
import { Course } from '../../canvas/course';
import {ICourseData, IUserData} from '../../canvas/canvasDataDefs';


const mockCourse: Course = new Course({
    ...mockCourseData,
    id: 1,
    name: 'BP_TEST000: Test Course',
    course_code: 'BP_TEST',
    blueprint: true,

}) as Course;
mockCourse.getAssociatedCourses = jest.fn().mockResolvedValue([]);


function getMockCourse(data:Partial<ICourseData>, associatedCourses: Course[] = []) {
    const course = new Course({
        ...mockCourseData,
        ...data,
    });
    course.getItem = jest.fn();
    course.getAssociatedCourses = jest.fn().mockResolvedValue(associatedCourses)
    return course;
}

const mockUser: IUserData = {
    id: 1,
    name: 'Test User',
    email: 'test@example.com',
} as IUserData;

const renderComponent = (props: Partial<IPublishInterfaceProps> = {}) => {
    const defaultProps: IPublishInterfaceProps = {
        course: mockCourse,
        user: mockUser,
        ...props,
    };

    return render(<PublishInterface {...defaultProps} />);
};

describe('PublishInterface Component', () => {
    it('renders without crashing', () => {
        renderComponent();
        expect(screen.getByText('Manage Sections')).toBeInTheDocument();
    });

    it('displays "Not A Blueprint" when course is not a blueprint', () => {
        let course =  getMockCourse({...mockCourseData, blueprint: false });
        renderComponent({course});
        expect(screen.getByText('Not A Blueprint')).toBeInTheDocument();
    });

    it('opens modal when "Manage Sections" button is clicked', () => {
        renderComponent();
        fireEvent.click(screen.getByText('Manage Sections'));
        expect(screen.getByText('Sections')).toBeInTheDocument();
    });

    it('displays loading state when publishing courses', async () => {
        renderComponent();
        fireEvent.click(screen.getByText('Manage Sections'));

        fireEvent.click(screen.getByText('Publish'));
        await waitFor(() => screen.getByRole(/alert/));
        expect(screen.getByText('Publishing')).toBeInTheDocument();
        // Simulate delay for publishing
        await waitFor(() => screen.getByText(/Published/i));
        expect(screen.getByText('Published')).toBeInTheDocument();
    });

    it('calls applySectionProfiles when "Set Bios" button is clicked', async () => {
        renderComponent();
        fireEvent.click(screen.getByText('Manage Sections'));
        fireEvent.click(screen.getByText('Set Bios'));
        // Simulate delay for applying section profiles
        await new Promise(resolve => setTimeout(resolve, 100));
        expect(screen.getByText('Profiles Updated')).toBeInTheDocument();
    });
});
