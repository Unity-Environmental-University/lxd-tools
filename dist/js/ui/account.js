/*! For license information please see account.js.LICENSE.txt */
(()=>{var t={4148:(t,e,r)=>{"use strict";function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function o(t,e){for(var r=0;r<e.length;r++){var o=e[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(void 0,i=function(t,e){if("object"!==n(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var o=r.call(t,"string");if("object"!==n(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(o.key),"symbol"===n(i)?i:String(i)),o)}var i}function i(t,e,r){return e&&o(t.prototype,e),r&&o(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}var a,s,c=r(9597).codes,u=c.ERR_AMBIGUOUS_ARGUMENT,l=c.ERR_INVALID_ARG_TYPE,f=c.ERR_INVALID_ARG_VALUE,p=c.ERR_INVALID_RETURN_VALUE,y=c.ERR_MISSING_ARGS,g=r(3918),d=r(537).inspect,m=r(537).types,h=m.isPromise,b=m.isRegExp,v=r(1514)(),A=r(9394)(),w=r(8075)("RegExp.prototype.test");function x(){var t=r(2299);a=t.isDeepEqual,s=t.isDeepStrictEqual}new Map;var j=!1,O=t.exports=E,_={};function S(t){if(t.message instanceof Error)throw t.message;throw new g(t)}function P(t,e,r,n){if(!r){var o=!1;if(0===e)o=!0,n="No value argument passed to `assert.ok()`";else if(n instanceof Error)throw n;var i=new g({actual:r,expected:!0,message:n,operator:"==",stackStartFn:t});throw i.generatedMessage=o,i}}function E(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];P.apply(void 0,[E,e.length].concat(e))}O.fail=function t(e,r,n,o,i){var a,s=arguments.length;if(0===s?a="Failed":1===s?(n=e,e=void 0):(!1===j&&(j=!0,(process.emitWarning?process.emitWarning:console.warn.bind(console))("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.","DeprecationWarning","DEP0094")),2===s&&(o="!=")),n instanceof Error)throw n;var c={actual:e,expected:r,operator:void 0===o?"fail":o,stackStartFn:i||t};void 0!==n&&(c.message=n);var u=new g(c);throw a&&(u.message=a,u.generatedMessage=!0),u},O.AssertionError=g,O.ok=E,O.equal=function t(e,r,n){if(arguments.length<2)throw new y("actual","expected");e!=r&&S({actual:e,expected:r,message:n,operator:"==",stackStartFn:t})},O.notEqual=function t(e,r,n){if(arguments.length<2)throw new y("actual","expected");e==r&&S({actual:e,expected:r,message:n,operator:"!=",stackStartFn:t})},O.deepEqual=function t(e,r,n){if(arguments.length<2)throw new y("actual","expected");void 0===a&&x(),a(e,r)||S({actual:e,expected:r,message:n,operator:"deepEqual",stackStartFn:t})},O.notDeepEqual=function t(e,r,n){if(arguments.length<2)throw new y("actual","expected");void 0===a&&x(),a(e,r)&&S({actual:e,expected:r,message:n,operator:"notDeepEqual",stackStartFn:t})},O.deepStrictEqual=function t(e,r,n){if(arguments.length<2)throw new y("actual","expected");void 0===a&&x(),s(e,r)||S({actual:e,expected:r,message:n,operator:"deepStrictEqual",stackStartFn:t})},O.notDeepStrictEqual=function t(e,r,n){if(arguments.length<2)throw new y("actual","expected");void 0===a&&x(),s(e,r)&&S({actual:e,expected:r,message:n,operator:"notDeepStrictEqual",stackStartFn:t})},O.strictEqual=function t(e,r,n){if(arguments.length<2)throw new y("actual","expected");A(e,r)||S({actual:e,expected:r,message:n,operator:"strictEqual",stackStartFn:t})},O.notStrictEqual=function t(e,r,n){if(arguments.length<2)throw new y("actual","expected");A(e,r)&&S({actual:e,expected:r,message:n,operator:"notStrictEqual",stackStartFn:t})};var k=i((function t(e,r,n){var o=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),r.forEach((function(t){t in e&&(void 0!==n&&"string"==typeof n[t]&&b(e[t])&&w(e[t],n[t])?o[t]=n[t]:o[t]=e[t])}))}));function T(t,e,r,o){if("function"!=typeof e){if(b(e))return w(e,t);if(2===arguments.length)throw new l("expected",["Function","RegExp"],e);if("object"!==n(t)||null===t){var i=new g({actual:t,expected:e,message:r,operator:"deepStrictEqual",stackStartFn:o});throw i.operator=o.name,i}var c=Object.keys(e);if(e instanceof Error)c.push("name","message");else if(0===c.length)throw new f("error",e,"may not be an empty object");return void 0===a&&x(),c.forEach((function(n){"string"==typeof t[n]&&b(e[n])&&w(e[n],t[n])||function(t,e,r,n,o,i){if(!(r in t)||!s(t[r],e[r])){if(!n){var a=new k(t,o),c=new k(e,o,t),u=new g({actual:a,expected:c,operator:"deepStrictEqual",stackStartFn:i});throw u.actual=t,u.expected=e,u.operator=i.name,u}S({actual:t,expected:e,message:n,operator:i.name,stackStartFn:i})}}(t,e,n,r,c,o)})),!0}return void 0!==e.prototype&&t instanceof e||!Error.isPrototypeOf(e)&&!0===e.call({},t)}function I(t){if("function"!=typeof t)throw new l("fn","Function",t);try{t()}catch(t){return t}return _}function D(t){return h(t)||null!==t&&"object"===n(t)&&"function"==typeof t.then&&"function"==typeof t.catch}function U(t){return Promise.resolve().then((function(){var e;if("function"==typeof t){if(!D(e=t()))throw new p("instance of Promise","promiseFn",e)}else{if(!D(t))throw new l("promiseFn",["Function","Promise"],t);e=t}return Promise.resolve().then((function(){return e})).then((function(){return _})).catch((function(t){return t}))}))}function R(t,e,r,o){if("string"==typeof r){if(4===arguments.length)throw new l("error",["Object","Error","Function","RegExp"],r);if("object"===n(e)&&null!==e){if(e.message===r)throw new u("error/message",'The error message "'.concat(e.message,'" is identical to the message.'))}else if(e===r)throw new u("error/message",'The error "'.concat(e,'" is identical to the message.'));o=r,r=void 0}else if(null!=r&&"object"!==n(r)&&"function"!=typeof r)throw new l("error",["Object","Error","Function","RegExp"],r);if(e===_){var i="";r&&r.name&&(i+=" (".concat(r.name,")")),i+=o?": ".concat(o):".";var a="rejects"===t.name?"rejection":"exception";S({actual:void 0,expected:r,operator:t.name,message:"Missing expected ".concat(a).concat(i),stackStartFn:t})}if(r&&!T(e,r,o,t))throw e}function C(t,e,r,n){if(e!==_){if("string"==typeof r&&(n=r,r=void 0),!r||T(e,r)){var o=n?": ".concat(n):".",i="doesNotReject"===t.name?"rejection":"exception";S({actual:e,expected:r,operator:t.name,message:"Got unwanted ".concat(i).concat(o,"\n")+'Actual message: "'.concat(e&&e.message,'"'),stackStartFn:t})}throw e}}function F(t,e,r,o,i){if(!b(e))throw new l("regexp","RegExp",e);var a="match"===i;if("string"!=typeof t||w(e,t)!==a){if(r instanceof Error)throw r;var s=!r;r=r||("string"!=typeof t?'The "string" argument must be of type string. Received type '+"".concat(n(t)," (").concat(d(t),")"):(a?"The input did not match the regular expression ":"The input was expected to not match the regular expression ")+"".concat(d(e),". Input:\n\n").concat(d(t),"\n"));var c=new g({actual:t,expected:e,message:r,operator:i,stackStartFn:o});throw c.generatedMessage=s,c}}function N(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];P.apply(void 0,[N,e.length].concat(e))}O.throws=function t(e){for(var r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];R.apply(void 0,[t,I(e)].concat(n))},O.rejects=function t(e){for(var r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];return U(e).then((function(e){return R.apply(void 0,[t,e].concat(n))}))},O.doesNotThrow=function t(e){for(var r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];C.apply(void 0,[t,I(e)].concat(n))},O.doesNotReject=function t(e){for(var r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];return U(e).then((function(e){return C.apply(void 0,[t,e].concat(n))}))},O.ifError=function t(e){if(null!=e){var r="ifError got unwanted exception: ";"object"===n(e)&&"string"==typeof e.message?0===e.message.length&&e.constructor?r+=e.constructor.name:r+=e.message:r+=d(e);var o=new g({actual:e,expected:null,operator:"ifError",message:r,stackStartFn:t}),i=e.stack;if("string"==typeof i){var a=i.split("\n");a.shift();for(var s=o.stack.split("\n"),c=0;c<a.length;c++){var u=s.indexOf(a[c]);if(-1!==u){s=s.slice(0,u);break}}o.stack="".concat(s.join("\n"),"\n").concat(a.join("\n"))}throw o}},O.match=function t(e,r,n){F(e,r,n,t,"match")},O.doesNotMatch=function t(e,r,n){F(e,r,n,t,"doesNotMatch")},O.strict=v(N,O,{equal:O.strictEqual,deepEqual:O.deepStrictEqual,notEqual:O.notStrictEqual,notDeepEqual:O.notDeepStrictEqual}),O.strict.strict=O.strict},3918:(t,e,r)=>{"use strict";function n(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function o(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?n(Object(r),!0).forEach((function(e){var n,o,i;n=t,o=e,i=r[e],(o=a(o))in n?Object.defineProperty(n,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[o]=i})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,a(n.key),n)}}function a(t){var e=function(t,e){if("object"!==g(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==g(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===g(e)?e:String(e)}function s(t,e){if(e&&("object"===g(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return c(t)}function c(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function u(t){var e="function"==typeof Map?new Map:void 0;return u=function(t){if(null===t||(r=t,-1===Function.toString.call(r).indexOf("[native code]")))return t;var r;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,n)}function n(){return l(t,arguments,y(this).constructor)}return n.prototype=Object.create(t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),p(n,t)},u(t)}function l(t,e,r){return l=f()?Reflect.construct.bind():function(t,e,r){var n=[null];n.push.apply(n,e);var o=new(Function.bind.apply(t,n));return r&&p(o,r.prototype),o},l.apply(null,arguments)}function f(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}function p(t,e){return p=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},p(t,e)}function y(t){return y=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},y(t)}function g(t){return g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},g(t)}var d=r(537).inspect,m=r(9597).codes.ERR_INVALID_ARG_TYPE;function h(t,e,r){return(void 0===r||r>t.length)&&(r=t.length),t.substring(r-e.length,r)===e}var b="",v="",A="",w="",x={deepStrictEqual:"Expected values to be strictly deep-equal:",strictEqual:"Expected values to be strictly equal:",strictEqualObject:'Expected "actual" to be reference-equal to "expected":',deepEqual:"Expected values to be loosely deep-equal:",equal:"Expected values to be loosely equal:",notDeepStrictEqual:'Expected "actual" not to be strictly deep-equal to:',notStrictEqual:'Expected "actual" to be strictly unequal to:',notStrictEqualObject:'Expected "actual" not to be reference-equal to "expected":',notDeepEqual:'Expected "actual" not to be loosely deep-equal to:',notEqual:'Expected "actual" to be loosely unequal to:',notIdentical:"Values identical but not reference-equal:"};function j(t){var e=Object.keys(t),r=Object.create(Object.getPrototypeOf(t));return e.forEach((function(e){r[e]=t[e]})),Object.defineProperty(r,"message",{value:t.message}),r}function O(t){return d(t,{compact:!1,customInspect:!1,depth:1e3,maxArrayLength:1/0,showHidden:!1,breakLength:1/0,showProxy:!1,sorted:!0,getters:!0})}var _=function(t,e){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&p(t,e)}(_,t);var r,n,a,u,l=(r=_,n=f(),function(){var t,e=y(r);if(n){var o=y(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return s(this,t)});function _(t){var e;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,_),"object"!==g(t)||null===t)throw new m("options","Object",t);var r=t.message,n=t.operator,o=t.stackStartFn,i=t.actual,a=t.expected,u=Error.stackTraceLimit;if(Error.stackTraceLimit=0,null!=r)e=l.call(this,String(r));else if(process.stderr&&process.stderr.isTTY&&(process.stderr&&process.stderr.getColorDepth&&1!==process.stderr.getColorDepth()?(b="[34m",v="[32m",w="[39m",A="[31m"):(b="",v="",w="",A="")),"object"===g(i)&&null!==i&&"object"===g(a)&&null!==a&&"stack"in i&&i instanceof Error&&"stack"in a&&a instanceof Error&&(i=j(i),a=j(a)),"deepStrictEqual"===n||"strictEqual"===n)e=l.call(this,function(t,e,r){var n="",o="",i=0,a="",s=!1,c=O(t),u=c.split("\n"),l=O(e).split("\n"),f=0,p="";if("strictEqual"===r&&"object"===g(t)&&"object"===g(e)&&null!==t&&null!==e&&(r="strictEqualObject"),1===u.length&&1===l.length&&u[0]!==l[0]){var y=u[0].length+l[0].length;if(y<=10){if(!("object"===g(t)&&null!==t||"object"===g(e)&&null!==e||0===t&&0===e))return"".concat(x[r],"\n\n")+"".concat(u[0]," !== ").concat(l[0],"\n")}else if("strictEqualObject"!==r&&y<(process.stderr&&process.stderr.isTTY?process.stderr.columns:80)){for(;u[0][f]===l[0][f];)f++;f>2&&(p="\n  ".concat(function(t,e){if(e=Math.floor(e),0==t.length||0==e)return"";var r=t.length*e;for(e=Math.floor(Math.log(e)/Math.log(2));e;)t+=t,e--;return t+t.substring(0,r-t.length)}(" ",f),"^"),f=0)}}for(var d=u[u.length-1],m=l[l.length-1];d===m&&(f++<2?a="\n  ".concat(d).concat(a):n=d,u.pop(),l.pop(),0!==u.length&&0!==l.length);)d=u[u.length-1],m=l[l.length-1];var j=Math.max(u.length,l.length);if(0===j){var _=c.split("\n");if(_.length>30)for(_[26]="".concat(b,"...").concat(w);_.length>27;)_.pop();return"".concat(x.notIdentical,"\n\n").concat(_.join("\n"),"\n")}f>3&&(a="\n".concat(b,"...").concat(w).concat(a),s=!0),""!==n&&(a="\n  ".concat(n).concat(a),n="");var S=0,P=x[r]+"\n".concat(v,"+ actual").concat(w," ").concat(A,"- expected").concat(w),E=" ".concat(b,"...").concat(w," Lines skipped");for(f=0;f<j;f++){var k=f-i;if(u.length<f+1)k>1&&f>2&&(k>4?(o+="\n".concat(b,"...").concat(w),s=!0):k>3&&(o+="\n  ".concat(l[f-2]),S++),o+="\n  ".concat(l[f-1]),S++),i=f,n+="\n".concat(A,"-").concat(w," ").concat(l[f]),S++;else if(l.length<f+1)k>1&&f>2&&(k>4?(o+="\n".concat(b,"...").concat(w),s=!0):k>3&&(o+="\n  ".concat(u[f-2]),S++),o+="\n  ".concat(u[f-1]),S++),i=f,o+="\n".concat(v,"+").concat(w," ").concat(u[f]),S++;else{var T=l[f],I=u[f],D=I!==T&&(!h(I,",")||I.slice(0,-1)!==T);D&&h(T,",")&&T.slice(0,-1)===I&&(D=!1,I+=","),D?(k>1&&f>2&&(k>4?(o+="\n".concat(b,"...").concat(w),s=!0):k>3&&(o+="\n  ".concat(u[f-2]),S++),o+="\n  ".concat(u[f-1]),S++),i=f,o+="\n".concat(v,"+").concat(w," ").concat(I),n+="\n".concat(A,"-").concat(w," ").concat(T),S+=2):(o+=n,n="",1!==k&&0!==f||(o+="\n  ".concat(I),S++))}if(S>20&&f<j-2)return"".concat(P).concat(E,"\n").concat(o,"\n").concat(b,"...").concat(w).concat(n,"\n")+"".concat(b,"...").concat(w)}return"".concat(P).concat(s?E:"","\n").concat(o).concat(n).concat(a).concat(p)}(i,a,n));else if("notDeepStrictEqual"===n||"notStrictEqual"===n){var f=x[n],p=O(i).split("\n");if("notStrictEqual"===n&&"object"===g(i)&&null!==i&&(f=x.notStrictEqualObject),p.length>30)for(p[26]="".concat(b,"...").concat(w);p.length>27;)p.pop();e=1===p.length?l.call(this,"".concat(f," ").concat(p[0])):l.call(this,"".concat(f,"\n\n").concat(p.join("\n"),"\n"))}else{var y=O(i),d="",S=x[n];"notDeepEqual"===n||"notEqual"===n?(y="".concat(x[n],"\n\n").concat(y)).length>1024&&(y="".concat(y.slice(0,1021),"...")):(d="".concat(O(a)),y.length>512&&(y="".concat(y.slice(0,509),"...")),d.length>512&&(d="".concat(d.slice(0,509),"...")),"deepEqual"===n||"equal"===n?y="".concat(S,"\n\n").concat(y,"\n\nshould equal\n\n"):d=" ".concat(n," ").concat(d)),e=l.call(this,"".concat(y).concat(d))}return Error.stackTraceLimit=u,e.generatedMessage=!r,Object.defineProperty(c(e),"name",{value:"AssertionError [ERR_ASSERTION]",enumerable:!1,writable:!0,configurable:!0}),e.code="ERR_ASSERTION",e.actual=i,e.expected=a,e.operator=n,Error.captureStackTrace&&Error.captureStackTrace(c(e),o),e.stack,e.name="AssertionError",s(e)}return a=_,(u=[{key:"toString",value:function(){return"".concat(this.name," [").concat(this.code,"]: ").concat(this.message)}},{key:e,value:function(t,e){return d(this,o(o({},e),{},{customInspect:!1,depth:0}))}}])&&i(a.prototype,u),Object.defineProperty(a,"prototype",{writable:!1}),_}(u(Error),d.custom);t.exports=_},9597:(t,e,r)=>{"use strict";function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function o(t,e){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},o(t,e)}function i(t){return i=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},i(t)}var a,s,c={};function u(t,e,r){r||(r=Error);var a=function(r){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&o(t,e)}(l,r);var a,s,c,u=(s=l,c=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=i(s);if(c){var r=i(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===n(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function l(r,n,o){var i;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,l),i=u.call(this,function(t,r,n){return"string"==typeof e?e:e(t,r,n)}(r,n,o)),i.code=t,i}return a=l,Object.defineProperty(a,"prototype",{writable:!1}),a}(r);c[t]=a}function l(t,e){if(Array.isArray(t)){var r=t.length;return t=t.map((function(t){return String(t)})),r>2?"one of ".concat(e," ").concat(t.slice(0,r-1).join(", "),", or ")+t[r-1]:2===r?"one of ".concat(e," ").concat(t[0]," or ").concat(t[1]):"of ".concat(e," ").concat(t[0])}return"of ".concat(e," ").concat(String(t))}u("ERR_AMBIGUOUS_ARGUMENT",'The "%s" argument is ambiguous. %s',TypeError),u("ERR_INVALID_ARG_TYPE",(function(t,e,o){var i,s,c,u,f;if(void 0===a&&(a=r(4148)),a("string"==typeof t,"'name' must be a string"),"string"==typeof e&&(s="not ",e.substr(0,4)===s)?(i="must not be",e=e.replace(/^not /,"")):i="must be",function(t,e,r){return(void 0===r||r>t.length)&&(r=t.length),t.substring(r-9,r)===e}(t," argument"))c="The ".concat(t," ").concat(i," ").concat(l(e,"type"));else{var p=("number"!=typeof f&&(f=0),f+1>(u=t).length||-1===u.indexOf(".",f)?"argument":"property");c='The "'.concat(t,'" ').concat(p," ").concat(i," ").concat(l(e,"type"))}return c+". Received type ".concat(n(o))}),TypeError),u("ERR_INVALID_ARG_VALUE",(function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"is invalid";void 0===s&&(s=r(537));var o=s.inspect(e);return o.length>128&&(o="".concat(o.slice(0,128),"...")),"The argument '".concat(t,"' ").concat(n,". Received ").concat(o)}),TypeError,RangeError),u("ERR_INVALID_RETURN_VALUE",(function(t,e,r){var o;return o=r&&r.constructor&&r.constructor.name?"instance of ".concat(r.constructor.name):"type ".concat(n(r)),"Expected ".concat(t,' to be returned from the "').concat(e,'"')+" function but got ".concat(o,".")}),TypeError),u("ERR_MISSING_ARGS",(function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];void 0===a&&(a=r(4148)),a(e.length>0,"At least one arg needs to be specified");var o="The ",i=e.length;switch(e=e.map((function(t){return'"'.concat(t,'"')})),i){case 1:o+="".concat(e[0]," argument");break;case 2:o+="".concat(e[0]," and ").concat(e[1]," arguments");break;default:o+=e.slice(0,i-1).join(", "),o+=", and ".concat(e[i-1]," arguments")}return"".concat(o," must be specified")}),TypeError),t.exports.codes=c},2299:(t,e,r)=>{"use strict";function n(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,i,a,s=[],c=!0,u=!1;try{if(i=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=i.call(r)).done)&&(s.push(n.value),s.length!==e);c=!0);}catch(t){u=!0,o=t}finally{try{if(!c&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(u)throw o}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return o(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?o(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function i(t){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i(t)}var a=void 0!==/a/g.flags,s=function(t){var e=[];return t.forEach((function(t){return e.push(t)})),e},c=function(t){var e=[];return t.forEach((function(t,r){return e.push([r,t])})),e},u=Object.is?Object.is:r(7653),l=Object.getOwnPropertySymbols?Object.getOwnPropertySymbols:function(){return[]},f=Number.isNaN?Number.isNaN:r(4133);function p(t){return t.call.bind(t)}var y=p(Object.prototype.hasOwnProperty),g=p(Object.prototype.propertyIsEnumerable),d=p(Object.prototype.toString),m=r(537).types,h=m.isAnyArrayBuffer,b=m.isArrayBufferView,v=m.isDate,A=m.isMap,w=m.isRegExp,x=m.isSet,j=m.isNativeError,O=m.isBoxedPrimitive,_=m.isNumberObject,S=m.isStringObject,P=m.isBooleanObject,E=m.isBigIntObject,k=m.isSymbolObject,T=m.isFloat32Array,I=m.isFloat64Array;function D(t){if(0===t.length||t.length>10)return!0;for(var e=0;e<t.length;e++){var r=t.charCodeAt(e);if(r<48||r>57)return!0}return 10===t.length&&t>=Math.pow(2,32)}function U(t){return Object.keys(t).filter(D).concat(l(t).filter(Object.prototype.propertyIsEnumerable.bind(t)))}function R(t,e){if(t===e)return 0;for(var r=t.length,n=e.length,o=0,i=Math.min(r,n);o<i;++o)if(t[o]!==e[o]){r=t[o],n=e[o];break}return r<n?-1:n<r?1:0}var C=0,F=1,N=2,B=3;function $(t,e,r,n){if(t===e)return 0!==t||!r||u(t,e);if(r){if("object"!==i(t))return"number"==typeof t&&f(t)&&f(e);if("object"!==i(e)||null===t||null===e)return!1;if(Object.getPrototypeOf(t)!==Object.getPrototypeOf(e))return!1}else{if(null===t||"object"!==i(t))return(null===e||"object"!==i(e))&&t==e;if(null===e||"object"!==i(e))return!1}var o,s,c,l,p=d(t);if(p!==d(e))return!1;if(Array.isArray(t)){if(t.length!==e.length)return!1;var y=U(t),g=U(e);return y.length===g.length&&q(t,e,r,n,F,y)}if("[object Object]"===p&&(!A(t)&&A(e)||!x(t)&&x(e)))return!1;if(v(t)){if(!v(e)||Date.prototype.getTime.call(t)!==Date.prototype.getTime.call(e))return!1}else if(w(t)){if(!w(e)||(c=t,l=e,!(a?c.source===l.source&&c.flags===l.flags:RegExp.prototype.toString.call(c)===RegExp.prototype.toString.call(l))))return!1}else if(j(t)||t instanceof Error){if(t.message!==e.message||t.name!==e.name)return!1}else{if(b(t)){if(r||!T(t)&&!I(t)){if(!function(t,e){return t.byteLength===e.byteLength&&0===R(new Uint8Array(t.buffer,t.byteOffset,t.byteLength),new Uint8Array(e.buffer,e.byteOffset,e.byteLength))}(t,e))return!1}else if(!function(t,e){if(t.byteLength!==e.byteLength)return!1;for(var r=0;r<t.byteLength;r++)if(t[r]!==e[r])return!1;return!0}(t,e))return!1;var m=U(t),D=U(e);return m.length===D.length&&q(t,e,r,n,C,m)}if(x(t))return!(!x(e)||t.size!==e.size)&&q(t,e,r,n,N);if(A(t))return!(!A(e)||t.size!==e.size)&&q(t,e,r,n,B);if(h(t)){if(s=e,(o=t).byteLength!==s.byteLength||0!==R(new Uint8Array(o),new Uint8Array(s)))return!1}else if(O(t)&&!function(t,e){return _(t)?_(e)&&u(Number.prototype.valueOf.call(t),Number.prototype.valueOf.call(e)):S(t)?S(e)&&String.prototype.valueOf.call(t)===String.prototype.valueOf.call(e):P(t)?P(e)&&Boolean.prototype.valueOf.call(t)===Boolean.prototype.valueOf.call(e):E(t)?E(e)&&BigInt.prototype.valueOf.call(t)===BigInt.prototype.valueOf.call(e):k(e)&&Symbol.prototype.valueOf.call(t)===Symbol.prototype.valueOf.call(e)}(t,e))return!1}return q(t,e,r,n,C)}function M(t,e){return e.filter((function(e){return g(t,e)}))}function q(t,e,r,o,a,u){if(5===arguments.length){u=Object.keys(t);var f=Object.keys(e);if(u.length!==f.length)return!1}for(var p=0;p<u.length;p++)if(!y(e,u[p]))return!1;if(r&&5===arguments.length){var d=l(t);if(0!==d.length){var m=0;for(p=0;p<d.length;p++){var h=d[p];if(g(t,h)){if(!g(e,h))return!1;u.push(h),m++}else if(g(e,h))return!1}var b=l(e);if(d.length!==b.length&&M(e,b).length!==m)return!1}else{var v=l(e);if(0!==v.length&&0!==M(e,v).length)return!1}}if(0===u.length&&(a===C||a===F&&0===t.length||0===t.size))return!0;if(void 0===o)o={val1:new Map,val2:new Map,position:0};else{var A=o.val1.get(t);if(void 0!==A){var w=o.val2.get(e);if(void 0!==w)return A===w}o.position++}o.val1.set(t,o.position),o.val2.set(e,o.position);var x=function(t,e,r,o,a,u){var l=0;if(u===N){if(!function(t,e,r,n){for(var o=null,a=s(t),c=0;c<a.length;c++){var u=a[c];if("object"===i(u)&&null!==u)null===o&&(o=new Set),o.add(u);else if(!e.has(u)){if(r)return!1;if(!z(t,e,u))return!1;null===o&&(o=new Set),o.add(u)}}if(null!==o){for(var l=s(e),f=0;f<l.length;f++){var p=l[f];if("object"===i(p)&&null!==p){if(!L(o,p,r,n))return!1}else if(!r&&!t.has(p)&&!L(o,p,r,n))return!1}return 0===o.size}return!0}(t,e,r,a))return!1}else if(u===B){if(!function(t,e,r,o){for(var a=null,s=c(t),u=0;u<s.length;u++){var l=n(s[u],2),f=l[0],p=l[1];if("object"===i(f)&&null!==f)null===a&&(a=new Set),a.add(f);else{var y=e.get(f);if(void 0===y&&!e.has(f)||!$(p,y,r,o)){if(r)return!1;if(!W(t,e,f,p,o))return!1;null===a&&(a=new Set),a.add(f)}}}if(null!==a){for(var g=c(e),d=0;d<g.length;d++){var m=n(g[d],2),h=m[0],b=m[1];if("object"===i(h)&&null!==h){if(!V(a,t,h,b,r,o))return!1}else if(!(r||t.has(h)&&$(t.get(h),b,!1,o)||V(a,t,h,b,!1,o)))return!1}return 0===a.size}return!0}(t,e,r,a))return!1}else if(u===F)for(;l<t.length;l++){if(!y(t,l)){if(y(e,l))return!1;for(var f=Object.keys(t);l<f.length;l++){var p=f[l];if(!y(e,p)||!$(t[p],e[p],r,a))return!1}return f.length===Object.keys(e).length}if(!y(e,l)||!$(t[l],e[l],r,a))return!1}for(l=0;l<o.length;l++){var g=o[l];if(!$(t[g],e[g],r,a))return!1}return!0}(t,e,r,u,o,a);return o.val1.delete(t),o.val2.delete(e),x}function L(t,e,r,n){for(var o=s(t),i=0;i<o.length;i++){var a=o[i];if($(e,a,r,n))return t.delete(a),!0}return!1}function G(t){switch(i(t)){case"undefined":return null;case"object":return;case"symbol":return!1;case"string":t=+t;case"number":if(f(t))return!1}return!0}function z(t,e,r){var n=G(r);return null!=n?n:e.has(n)&&!t.has(n)}function W(t,e,r,n,o){var i=G(r);if(null!=i)return i;var a=e.get(i);return!(void 0===a&&!e.has(i)||!$(n,a,!1,o))&&!t.has(i)&&$(n,a,!1,o)}function V(t,e,r,n,o,i){for(var a=s(t),c=0;c<a.length;c++){var u=a[c];if($(r,u,o,i)&&$(n,e.get(u),o,i))return t.delete(u),!0}return!1}t.exports={isDeepEqual:function(t,e){return $(t,e,!1)},isDeepStrictEqual:function(t,e){return $(t,e,!0)}}},8075:(t,e,r)=>{"use strict";var n=r(453),o=r(487),i=o(n("String.prototype.indexOf"));t.exports=function(t,e){var r=n(t,!!e);return"function"==typeof r&&i(t,".prototype.")>-1?o(r):r}},487:(t,e,r)=>{"use strict";var n=r(6743),o=r(453),i=r(6897),a=r(9675),s=o("%Function.prototype.apply%"),c=o("%Function.prototype.call%"),u=o("%Reflect.apply%",!0)||n.call(c,s),l=r(655),f=o("%Math.max%");t.exports=function(t){if("function"!=typeof t)throw new a("a function is required");var e=u(n,c,arguments);return i(e,1+f(0,t.length-(arguments.length-1)),!0)};var p=function(){return u(n,s,arguments)};l?l(t.exports,"apply",{value:p}):t.exports.apply=p},41:(t,e,r)=>{"use strict";var n=r(655),o=r(8068),i=r(9675),a=r(5795);t.exports=function(t,e,r){if(!t||"object"!=typeof t&&"function"!=typeof t)throw new i("`obj` must be an object or a function`");if("string"!=typeof e&&"symbol"!=typeof e)throw new i("`property` must be a string or a symbol`");if(arguments.length>3&&"boolean"!=typeof arguments[3]&&null!==arguments[3])throw new i("`nonEnumerable`, if provided, must be a boolean or null");if(arguments.length>4&&"boolean"!=typeof arguments[4]&&null!==arguments[4])throw new i("`nonWritable`, if provided, must be a boolean or null");if(arguments.length>5&&"boolean"!=typeof arguments[5]&&null!==arguments[5])throw new i("`nonConfigurable`, if provided, must be a boolean or null");if(arguments.length>6&&"boolean"!=typeof arguments[6])throw new i("`loose`, if provided, must be a boolean");var s=arguments.length>3?arguments[3]:null,c=arguments.length>4?arguments[4]:null,u=arguments.length>5?arguments[5]:null,l=arguments.length>6&&arguments[6],f=!!a&&a(t,e);if(n)n(t,e,{configurable:null===u&&f?f.configurable:!u,enumerable:null===s&&f?f.enumerable:!s,value:r,writable:null===c&&f?f.writable:!c});else{if(!l&&(s||c||u))throw new o("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");t[e]=r}}},8452:(t,e,r)=>{"use strict";var n=r(1189),o="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),i=Object.prototype.toString,a=Array.prototype.concat,s=r(41),c=r(592)(),u=function(t,e,r,n){if(e in t)if(!0===n){if(t[e]===r)return}else if("function"!=typeof(o=n)||"[object Function]"!==i.call(o)||!n())return;var o;c?s(t,e,r,!0):s(t,e,r)},l=function(t,e){var r=arguments.length>2?arguments[2]:{},i=n(e);o&&(i=a.call(i,Object.getOwnPropertySymbols(e)));for(var s=0;s<i.length;s+=1)u(t,i[s],e[i[s]],r[i[s]])};l.supportsDescriptors=!!c,t.exports=l},655:(t,e,r)=>{"use strict";var n=r(453)("%Object.defineProperty%",!0)||!1;if(n)try{n({},"a",{value:1})}catch(t){n=!1}t.exports=n},1237:t=>{"use strict";t.exports=EvalError},9383:t=>{"use strict";t.exports=Error},9290:t=>{"use strict";t.exports=RangeError},9538:t=>{"use strict";t.exports=ReferenceError},8068:t=>{"use strict";t.exports=SyntaxError},9675:t=>{"use strict";t.exports=TypeError},5345:t=>{"use strict";t.exports=URIError},2682:(t,e,r)=>{"use strict";var n=r(9600),o=Object.prototype.toString,i=Object.prototype.hasOwnProperty;t.exports=function(t,e,r){if(!n(e))throw new TypeError("iterator must be a function");var a;arguments.length>=3&&(a=r),"[object Array]"===o.call(t)?function(t,e,r){for(var n=0,o=t.length;n<o;n++)i.call(t,n)&&(null==r?e(t[n],n,t):e.call(r,t[n],n,t))}(t,e,a):"string"==typeof t?function(t,e,r){for(var n=0,o=t.length;n<o;n++)null==r?e(t.charAt(n),n,t):e.call(r,t.charAt(n),n,t)}(t,e,a):function(t,e,r){for(var n in t)i.call(t,n)&&(null==r?e(t[n],n,t):e.call(r,t[n],n,t))}(t,e,a)}},9353:t=>{"use strict";var e=Object.prototype.toString,r=Math.max,n=function(t,e){for(var r=[],n=0;n<t.length;n+=1)r[n]=t[n];for(var o=0;o<e.length;o+=1)r[o+t.length]=e[o];return r};t.exports=function(t){var o=this;if("function"!=typeof o||"[object Function]"!==e.apply(o))throw new TypeError("Function.prototype.bind called on incompatible "+o);for(var i,a=function(t,e){for(var r=[],n=1,o=0;n<t.length;n+=1,o+=1)r[o]=t[n];return r}(arguments),s=r(0,o.length-a.length),c=[],u=0;u<s;u++)c[u]="$"+u;if(i=Function("binder","return function ("+function(t,e){for(var r="",n=0;n<t.length;n+=1)r+=t[n],n+1<t.length&&(r+=",");return r}(c)+"){ return binder.apply(this,arguments); }")((function(){if(this instanceof i){var e=o.apply(this,n(a,arguments));return Object(e)===e?e:this}return o.apply(t,n(a,arguments))})),o.prototype){var l=function(){};l.prototype=o.prototype,i.prototype=new l,l.prototype=null}return i}},6743:(t,e,r)=>{"use strict";var n=r(9353);t.exports=Function.prototype.bind||n},453:(t,e,r)=>{"use strict";var n,o=r(9383),i=r(1237),a=r(9290),s=r(9538),c=r(8068),u=r(9675),l=r(5345),f=Function,p=function(t){try{return f('"use strict"; return ('+t+").constructor;")()}catch(t){}},y=Object.getOwnPropertyDescriptor;if(y)try{y({},"")}catch(t){y=null}var g=function(){throw new u},d=y?function(){try{return g}catch(t){try{return y(arguments,"callee").get}catch(t){return g}}}():g,m=r(4039)(),h=r(24)(),b=Object.getPrototypeOf||(h?function(t){return t.__proto__}:null),v={},A="undefined"!=typeof Uint8Array&&b?b(Uint8Array):n,w={__proto__:null,"%AggregateError%":"undefined"==typeof AggregateError?n:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?n:ArrayBuffer,"%ArrayIteratorPrototype%":m&&b?b([][Symbol.iterator]()):n,"%AsyncFromSyncIteratorPrototype%":n,"%AsyncFunction%":v,"%AsyncGenerator%":v,"%AsyncGeneratorFunction%":v,"%AsyncIteratorPrototype%":v,"%Atomics%":"undefined"==typeof Atomics?n:Atomics,"%BigInt%":"undefined"==typeof BigInt?n:BigInt,"%BigInt64Array%":"undefined"==typeof BigInt64Array?n:BigInt64Array,"%BigUint64Array%":"undefined"==typeof BigUint64Array?n:BigUint64Array,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?n:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":o,"%eval%":eval,"%EvalError%":i,"%Float32Array%":"undefined"==typeof Float32Array?n:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?n:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?n:FinalizationRegistry,"%Function%":f,"%GeneratorFunction%":v,"%Int8Array%":"undefined"==typeof Int8Array?n:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?n:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?n:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":m&&b?b(b([][Symbol.iterator]())):n,"%JSON%":"object"==typeof JSON?JSON:n,"%Map%":"undefined"==typeof Map?n:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&m&&b?b((new Map)[Symbol.iterator]()):n,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?n:Promise,"%Proxy%":"undefined"==typeof Proxy?n:Proxy,"%RangeError%":a,"%ReferenceError%":s,"%Reflect%":"undefined"==typeof Reflect?n:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?n:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&m&&b?b((new Set)[Symbol.iterator]()):n,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?n:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":m&&b?b(""[Symbol.iterator]()):n,"%Symbol%":m?Symbol:n,"%SyntaxError%":c,"%ThrowTypeError%":d,"%TypedArray%":A,"%TypeError%":u,"%Uint8Array%":"undefined"==typeof Uint8Array?n:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?n:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?n:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?n:Uint32Array,"%URIError%":l,"%WeakMap%":"undefined"==typeof WeakMap?n:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?n:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?n:WeakSet};if(b)try{null.error}catch(t){var x=b(b(t));w["%Error.prototype%"]=x}var j=function t(e){var r;if("%AsyncFunction%"===e)r=p("async function () {}");else if("%GeneratorFunction%"===e)r=p("function* () {}");else if("%AsyncGeneratorFunction%"===e)r=p("async function* () {}");else if("%AsyncGenerator%"===e){var n=t("%AsyncGeneratorFunction%");n&&(r=n.prototype)}else if("%AsyncIteratorPrototype%"===e){var o=t("%AsyncGenerator%");o&&b&&(r=b(o.prototype))}return w[e]=r,r},O={__proto__:null,"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},_=r(6743),S=r(9957),P=_.call(Function.call,Array.prototype.concat),E=_.call(Function.apply,Array.prototype.splice),k=_.call(Function.call,String.prototype.replace),T=_.call(Function.call,String.prototype.slice),I=_.call(Function.call,RegExp.prototype.exec),D=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,U=/\\(\\)?/g,R=function(t,e){var r,n=t;if(S(O,n)&&(n="%"+(r=O[n])[0]+"%"),S(w,n)){var o=w[n];if(o===v&&(o=j(n)),void 0===o&&!e)throw new u("intrinsic "+t+" exists, but is not available. Please file an issue!");return{alias:r,name:n,value:o}}throw new c("intrinsic "+t+" does not exist!")};t.exports=function(t,e){if("string"!=typeof t||0===t.length)throw new u("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof e)throw new u('"allowMissing" argument must be a boolean');if(null===I(/^%?[^%]*%?$/,t))throw new c("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var r=function(t){var e=T(t,0,1),r=T(t,-1);if("%"===e&&"%"!==r)throw new c("invalid intrinsic syntax, expected closing `%`");if("%"===r&&"%"!==e)throw new c("invalid intrinsic syntax, expected opening `%`");var n=[];return k(t,D,(function(t,e,r,o){n[n.length]=r?k(o,U,"$1"):e||t})),n}(t),n=r.length>0?r[0]:"",o=R("%"+n+"%",e),i=o.name,a=o.value,s=!1,l=o.alias;l&&(n=l[0],E(r,P([0,1],l)));for(var f=1,p=!0;f<r.length;f+=1){var g=r[f],d=T(g,0,1),m=T(g,-1);if(('"'===d||"'"===d||"`"===d||'"'===m||"'"===m||"`"===m)&&d!==m)throw new c("property names with quotes must have matching quotes");if("constructor"!==g&&p||(s=!0),S(w,i="%"+(n+="."+g)+"%"))a=w[i];else if(null!=a){if(!(g in a)){if(!e)throw new u("base intrinsic for "+t+" exists, but the property is not available.");return}if(y&&f+1>=r.length){var h=y(a,g);a=(p=!!h)&&"get"in h&&!("originalValue"in h.get)?h.get:a[g]}else p=S(a,g),a=a[g];p&&!s&&(w[i]=a)}}return a}},5795:(t,e,r)=>{"use strict";var n=r(453)("%Object.getOwnPropertyDescriptor%",!0);if(n)try{n([],"length")}catch(t){n=null}t.exports=n},592:(t,e,r)=>{"use strict";var n=r(655),o=function(){return!!n};o.hasArrayLengthDefineBug=function(){if(!n)return null;try{return 1!==n([],"length",{value:1}).length}catch(t){return!0}},t.exports=o},24:t=>{"use strict";var e={__proto__:null,foo:{}},r=Object;t.exports=function(){return{__proto__:e}.foo===e.foo&&!(e instanceof r)}},4039:(t,e,r)=>{"use strict";var n="undefined"!=typeof Symbol&&Symbol,o=r(1333);t.exports=function(){return"function"==typeof n&&"function"==typeof Symbol&&"symbol"==typeof n("foo")&&"symbol"==typeof Symbol("bar")&&o()}},1333:t=>{"use strict";t.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var t={},e=Symbol("test"),r=Object(e);if("string"==typeof e)return!1;if("[object Symbol]"!==Object.prototype.toString.call(e))return!1;if("[object Symbol]"!==Object.prototype.toString.call(r))return!1;for(e in t[e]=42,t)return!1;if("function"==typeof Object.keys&&0!==Object.keys(t).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(t).length)return!1;var n=Object.getOwnPropertySymbols(t);if(1!==n.length||n[0]!==e)return!1;if(!Object.prototype.propertyIsEnumerable.call(t,e))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var o=Object.getOwnPropertyDescriptor(t,e);if(42!==o.value||!0!==o.enumerable)return!1}return!0}},9092:(t,e,r)=>{"use strict";var n=r(1333);t.exports=function(){return n()&&!!Symbol.toStringTag}},9957:(t,e,r)=>{"use strict";var n=Function.prototype.call,o=Object.prototype.hasOwnProperty,i=r(6743);t.exports=i.call(n,o)},6698:t=>{"function"==typeof Object.create?t.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,e){if(e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}}},7244:(t,e,r)=>{"use strict";var n=r(9092)(),o=r(8075)("Object.prototype.toString"),i=function(t){return!(n&&t&&"object"==typeof t&&Symbol.toStringTag in t)&&"[object Arguments]"===o(t)},a=function(t){return!!i(t)||null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Array]"!==o(t)&&"[object Function]"===o(t.callee)},s=function(){return i(arguments)}();i.isLegacyArguments=a,t.exports=s?i:a},9600:t=>{"use strict";var e,r,n=Function.prototype.toString,o="object"==typeof Reflect&&null!==Reflect&&Reflect.apply;if("function"==typeof o&&"function"==typeof Object.defineProperty)try{e=Object.defineProperty({},"length",{get:function(){throw r}}),r={},o((function(){throw 42}),null,e)}catch(t){t!==r&&(o=null)}else o=null;var i=/^\s*class\b/,a=function(t){try{var e=n.call(t);return i.test(e)}catch(t){return!1}},s=function(t){try{return!a(t)&&(n.call(t),!0)}catch(t){return!1}},c=Object.prototype.toString,u="function"==typeof Symbol&&!!Symbol.toStringTag,l=!(0 in[,]),f=function(){return!1};if("object"==typeof document){var p=document.all;c.call(p)===c.call(document.all)&&(f=function(t){if((l||!t)&&(void 0===t||"object"==typeof t))try{var e=c.call(t);return("[object HTMLAllCollection]"===e||"[object HTML document.all class]"===e||"[object HTMLCollection]"===e||"[object Object]"===e)&&null==t("")}catch(t){}return!1})}t.exports=o?function(t){if(f(t))return!0;if(!t)return!1;if("function"!=typeof t&&"object"!=typeof t)return!1;try{o(t,null,e)}catch(t){if(t!==r)return!1}return!a(t)&&s(t)}:function(t){if(f(t))return!0;if(!t)return!1;if("function"!=typeof t&&"object"!=typeof t)return!1;if(u)return s(t);if(a(t))return!1;var e=c.call(t);return!("[object Function]"!==e&&"[object GeneratorFunction]"!==e&&!/^\[object HTML/.test(e))&&s(t)}},8184:(t,e,r)=>{"use strict";var n,o=Object.prototype.toString,i=Function.prototype.toString,a=/^\s*(?:function)?\*/,s=r(9092)(),c=Object.getPrototypeOf;t.exports=function(t){if("function"!=typeof t)return!1;if(a.test(i.call(t)))return!0;if(!s)return"[object GeneratorFunction]"===o.call(t);if(!c)return!1;if(void 0===n){var e=function(){if(!s)return!1;try{return Function("return function*() {}")()}catch(t){}}();n=!!e&&c(e)}return c(t)===n}},3003:t=>{"use strict";t.exports=function(t){return t!=t}},4133:(t,e,r)=>{"use strict";var n=r(487),o=r(8452),i=r(3003),a=r(6642),s=r(2464),c=n(a(),Number);o(c,{getPolyfill:a,implementation:i,shim:s}),t.exports=c},6642:(t,e,r)=>{"use strict";var n=r(3003);t.exports=function(){return Number.isNaN&&Number.isNaN(NaN)&&!Number.isNaN("a")?Number.isNaN:n}},2464:(t,e,r)=>{"use strict";var n=r(8452),o=r(6642);t.exports=function(){var t=o();return n(Number,{isNaN:t},{isNaN:function(){return Number.isNaN!==t}}),t}},5680:(t,e,r)=>{"use strict";var n=r(5767);t.exports=function(t){return!!n(t)}},9211:t=>{"use strict";var e=function(t){return t!=t};t.exports=function(t,r){return 0===t&&0===r?1/t==1/r:t===r||!(!e(t)||!e(r))}},7653:(t,e,r)=>{"use strict";var n=r(8452),o=r(487),i=r(9211),a=r(9394),s=r(6576),c=o(a(),Object);n(c,{getPolyfill:a,implementation:i,shim:s}),t.exports=c},9394:(t,e,r)=>{"use strict";var n=r(9211);t.exports=function(){return"function"==typeof Object.is?Object.is:n}},6576:(t,e,r)=>{"use strict";var n=r(9394),o=r(8452);t.exports=function(){var t=n();return o(Object,{is:t},{is:function(){return Object.is!==t}}),t}},8875:(t,e,r)=>{"use strict";var n;if(!Object.keys){var o=Object.prototype.hasOwnProperty,i=Object.prototype.toString,a=r(1093),s=Object.prototype.propertyIsEnumerable,c=!s.call({toString:null},"toString"),u=s.call((function(){}),"prototype"),l=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],f=function(t){var e=t.constructor;return e&&e.prototype===t},p={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},y=function(){if("undefined"==typeof window)return!1;for(var t in window)try{if(!p["$"+t]&&o.call(window,t)&&null!==window[t]&&"object"==typeof window[t])try{f(window[t])}catch(t){return!0}}catch(t){return!0}return!1}();n=function(t){var e=null!==t&&"object"==typeof t,r="[object Function]"===i.call(t),n=a(t),s=e&&"[object String]"===i.call(t),p=[];if(!e&&!r&&!n)throw new TypeError("Object.keys called on a non-object");var g=u&&r;if(s&&t.length>0&&!o.call(t,0))for(var d=0;d<t.length;++d)p.push(String(d));if(n&&t.length>0)for(var m=0;m<t.length;++m)p.push(String(m));else for(var h in t)g&&"prototype"===h||!o.call(t,h)||p.push(String(h));if(c)for(var b=function(t){if("undefined"==typeof window||!y)return f(t);try{return f(t)}catch(t){return!1}}(t),v=0;v<l.length;++v)b&&"constructor"===l[v]||!o.call(t,l[v])||p.push(l[v]);return p}}t.exports=n},1189:(t,e,r)=>{"use strict";var n=Array.prototype.slice,o=r(1093),i=Object.keys,a=i?function(t){return i(t)}:r(8875),s=Object.keys;a.shim=function(){if(Object.keys){var t=function(){var t=Object.keys(arguments);return t&&t.length===arguments.length}(1,2);t||(Object.keys=function(t){return o(t)?s(n.call(t)):s(t)})}else Object.keys=a;return Object.keys||a},t.exports=a},1093:t=>{"use strict";var e=Object.prototype.toString;t.exports=function(t){var r=e.call(t),n="[object Arguments]"===r;return n||(n="[object Array]"!==r&&null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Function]"===e.call(t.callee)),n}},8403:(t,e,r)=>{"use strict";var n=r(1189),o=r(1333)(),i=r(8075),a=Object,s=i("Array.prototype.push"),c=i("Object.prototype.propertyIsEnumerable"),u=o?Object.getOwnPropertySymbols:null;t.exports=function(t,e){if(null==t)throw new TypeError("target must be an object");var r=a(t);if(1===arguments.length)return r;for(var i=1;i<arguments.length;++i){var l=a(arguments[i]),f=n(l),p=o&&(Object.getOwnPropertySymbols||u);if(p)for(var y=p(l),g=0;g<y.length;++g){var d=y[g];c(l,d)&&s(f,d)}for(var m=0;m<f.length;++m){var h=f[m];if(c(l,h)){var b=l[h];r[h]=b}}}return r}},1514:(t,e,r)=>{"use strict";var n=r(8403);t.exports=function(){return Object.assign?function(){if(!Object.assign)return!1;for(var t="abcdefghijklmnopqrst",e=t.split(""),r={},n=0;n<e.length;++n)r[e[n]]=e[n];var o=Object.assign({},r),i="";for(var a in o)i+=a;return t!==i}()||function(){if(!Object.assign||!Object.preventExtensions)return!1;var t=Object.preventExtensions({1:2});try{Object.assign(t,"xy")}catch(e){return"y"===t[1]}return!1}()?n:Object.assign:n}},6578:t=>{"use strict";t.exports=["Float32Array","Float64Array","Int8Array","Int16Array","Int32Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","BigInt64Array","BigUint64Array"]},6897:(t,e,r)=>{"use strict";var n=r(453),o=r(41),i=r(592)(),a=r(5795),s=r(9675),c=n("%Math.floor%");t.exports=function(t,e){if("function"!=typeof t)throw new s("`fn` is not a function");if("number"!=typeof e||e<0||e>4294967295||c(e)!==e)throw new s("`length` must be a positive 32-bit integer");var r=arguments.length>2&&!!arguments[2],n=!0,u=!0;if("length"in t&&a){var l=a(t,"length");l&&!l.configurable&&(n=!1),l&&!l.writable&&(u=!1)}return(n||u||!r)&&(i?o(t,"length",e,!0,!0):o(t,"length",e)),t}},5722:(t,e,r)=>{"use strict";r.d(e,{x1:()=>S});var n=r(4148),o=r.n(n),i=r(6815),a=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function a(t){try{c(n.next(t))}catch(t){i(t)}}function s(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,s)}c((n=n.apply(t,e||[])).next())}))};const s={Assignment:"assignment",Discussion:"discussion_topic",Quiz:"quiz",Attachment:"attachment","External Tool":"external_tool",File:"file",Page:"wiki_page"};function c(t){console.log("form",t);let e=new FormData;for(let r in t)u(e,r,t[r]);if(document){const t=document.querySelector("input[name='authenticity_token']"),r=t?t.value:null;r&&e.append("authenticity_token",r)}for(let t of e.entries())console.log(t[0],t[1]);return e}function u(t,e,r){if(Array.isArray(r))for(let n of r)u(t,`${e}[]`,n);else if("object"==typeof r)for(let n in r){const o=r[n];n=e.length>0?`${e}[${n}]`:n,u(t,n,o)}else t.append(e,r.toString())}function l(t){const e=/(week|module) (\d+)/i;let r=t.name.match(e),n=r?Number(r[1]):null;if(!n)for(let r of t.items){if(!r.hasOwnProperty("title"))continue;let t=r.title.match(e);t&&(n=t[2])}return n}function f(t,e=void 0){return a(this,void 0,void 0,(function*(){return yield p(`/api/v1/${t}`,e)}))}function p(t,{queryParams:e,fetchConfig:r}={queryParams:void 0,fetchConfig:void 0}){return a(this,void 0,void 0,(function*(){e&&(t+="?"+function(t){return new URLSearchParams(t)}(e));let n=yield fetch(t,r),i=yield n.json();if("object"==typeof i&&!Array.isArray(i)){let t=Array.from(Object.values(i));t&&(i=t.find((t=>Array.isArray(t))))}o()(Array.isArray(i));let a="!";for(;0!==a.length&&n&&n.headers.has("Link")&&n.ok;){const t=n.headers.get("Link");o()(t);const e=t.split(",").find((t=>t.includes("next")));if(e){a=e.split(";")[0].split("<")[1].split(">")[0],n=yield fetch(a,r);let t=yield n.json();if("object"==typeof t&&!Array.isArray(i)){let e=Array.from(Object.values(i));e&&(t=null==e?void 0:e.find((t=>Array.isArray(t))))}i=i.concat(t)}else a=""}return i}))}function y(t,e=null){return a(this,void 0,void 0,(function*(){(null==e?void 0:e.queryParams)&&(t+="?"+new URLSearchParams(e.queryParams));const r=yield fetch(t,null==e?void 0:e.fetchConfig);return yield r.json()}))}function g(t,e=null){return a(this,void 0,void 0,(function*(){return t=`/api/v1/${t}`,yield y(t,e)}))}function d(t,e=null){return a(this,void 0,void 0,(function*(){let r=yield g(t,e);return Array.isArray(r)?r[0]:r}))}class m{constructor(t){this.accountId=null,this._canvasData=t||{}}toString(){return JSON.stringify(this._canvasData)}getItem(t){return this._canvasData[t]||null}get myClass(){return this.constructor}get nameKey(){return o()(this.myClass._nameProperty),this.myClass._nameProperty}get contentUrlPath(){const t=this.constructor;return o()("number"==typeof this.accountId),o()("string"==typeof t._contentUrlTemplate),t._contentUrlTemplate.replace("{content_id}",this.id.toString()).replace("{account_id}",this.accountId.toString())}get htmlContentUrl(){return`/${this.contentUrlPath}`}get rawData(){const t={id:NaN};for(let e in this._canvasData)t[e]=this._canvasData[e];return t}static getDataById(t,e=null,r=null){return a(this,void 0,void 0,(function*(){let n=this.getUrlPathFromIds(t,e?e.id:null);const i=yield g(n,r);return o()(!Array.isArray(i)),i}))}static getById(t,e){return a(this,void 0,void 0,(function*(){return new this(yield this.getDataById(t,e))}))}static getUrlPathFromIds(t,e){o()("string"==typeof this._contentUrlTemplate);let r=this._contentUrlTemplate.replace("{content_id}",t.toString());return e&&(r=r.replace("{course_id}",e.toString())),r}static getAllUrl(t=null,e=null){o()("string"==typeof this._allContentUrlTemplate);let r=this._allContentUrlTemplate;return t&&(r=r.replace("{course_id}",t.toString())),e&&(r=r.replace("{account_id}",e.toString())),r}static getAll(t={},e={}){return a(this,void 0,void 0,(function*(){let r=this.getAllUrl();return(yield f(r,{queryParams:t,fetchConfig:e})).map((t=>new this(t)))}))}get id(){const t=this._canvasData[this.constructor._idProperty];return parseInt(t)}get name(){let t=this.constructor._nameProperty;return o()(t),this.getItem(t)}saveData(t){return a(this,void 0,void 0,(function*(){return o()(this.contentUrlPath),yield g(this.contentUrlPath,{fetchConfig:{method:"PUT",body:c(t)}})}))}delete(){return a(this,void 0,void 0,(function*(){return o()(this.contentUrlPath),yield g(this.contentUrlPath,{fetchConfig:{method:"DELETE"}})}))}}m._idProperty="id",m._nameProperty=null,m._contentUrlTemplate=null,m._allContentUrlTemplate=null;class h extends m{static getFromUrl(t=null){return a(this,void 0,void 0,(function*(){null===t&&(t=document.documentURI);let e=/accounts\/(\d+)/.exec(t);return e?(console.log(e),yield this.getById(parseInt(e[1]))):null}))}static getById(t,e=void 0){return a(this,void 0,void 0,(function*(){const r=yield this.getDataById(t,null,e);return console.assert(),new h(r)}))}static getRootAccount(t=!1){return a(this,void 0,void 0,(function*(){let e=yield this.getAll();if(!t&&this.hasOwnProperty("_rootAccount")&&this._rootAccount)return this._rootAccount;let r=e.find((t=>null===t.rootAccountId));return o()(r),this._rootAccount=r,r}))}get rootAccountId(){return this._canvasData.root_account_id}}h._nameProperty="name",h._contentUrlTemplate="accounts/{content_id}",h._allContentUrlTemplate="accounts";class b extends m{constructor(){super(...arguments),this._modules=void 0,this.modulesByWeekNumber=void 0}static getFromUrl(t=null){return a(this,void 0,void 0,(function*(){null===t&&(t=document.documentURI);let e=/courses\/(\d+)/.exec(t);if(e)return console.log(e),yield this.getById(parseInt(e[1]))}))}static getById(t,e=void 0){return a(this,void 0,void 0,(function*(){const r=yield d(`courses/${t}`,e);return new b(r)}))}static getCoursesByString(t,e=null,r={}){return a(this,void 0,void 0,(function*(){let n=null;const o=yield b.getAccountIdsByName();for(let i in o){let a=`accounts/${o[i]}/courses`;if(r.queryParams=r.queryParams||{},r.queryParams.search_term=t,null!==e&&(r.queryParams.enrollment_term_id=e.id),n=yield f(a,r),n&&n.length>0)break}return n&&0!==n.length?(n.length>1&&n.sort(((t,e)=>e.id-t.id)),n.map((t=>new b(t)))):null}))}static getAllByCode(t,e=null,r=void 0){return a(this,void 0,void 0,(function*(){return this.getCoursesByString(t,e,r)}))}static getByCode(t,e=null,r=void 0){return a(this,void 0,void 0,(function*(){const n=yield this.getCoursesByString(t,e,r);return Array.isArray(n)?n[0]:null}))}static getAccountIdsByName(){return a(this,void 0,void 0,(function*(){let t=yield b.getFromUrl();return t?{root:t._canvasData.root_account_id,current:t._canvasData.accountId}:(console.warn("You must be on a canvas page to get accounts"),{})}))}get contentUrlPath(){return`courses/${this.id}`}get courseUrl(){return this.htmlContentUrl}get courseCode(){let t=this.codeMatch;return t?`${t[1]||""}_${t[2]||""}`:null}get codeMatch(){return b.CODE_REGEX.exec(this._canvasData.course_code)}get baseCode(){let t=this.codeMatch;return t?t[2]:""}get codePrefix(){let t=this.codeMatch;return t?t[1]:""}get isBlueprint(){return"blueprint"in this._canvasData&&this._canvasData.blueprint}get isPublished(){return"available"===this._canvasData.workflow_state}getModules(){return a(this,void 0,void 0,(function*(){if(this._modules)return this._modules;let t=yield f(`${this.contentUrlPath}/modules?include[]=items&include[]=content_details`);return this._modules=t,t}))}getModulesByWeekNumber(){return a(this,void 0,void 0,(function*(){if(this.modulesByWeekNumber)return this.modulesByWeekNumber;let t=yield this.getModules(),e={};for(let r of t){let t=l(r);t&&(e[t]=r)}return this.modulesByWeekNumber=e,e}))}getModuleItemLink(t,e){return a(this,void 0,void 0,(function*(){o()(e.hasOwnProperty("type"));let r,n,i=e.type,a=null,s=e.hasOwnProperty("search")?e.search:null,c=e.hasOwnProperty("index")?e.index:null;if("number"==typeof t){let e=yield this.getModulesByWeekNumber();o()(e.hasOwnProperty(t)),r=t,n=e[r]}else n=t,r=l(n);if(n&&void 0!==i)if("Page"===i&&s)a=`/courses/${this.id}/pages?${new URLSearchParams([["search_term",s]])}`;else if(i&&c){"Discussion"===i&&1===r&&c++;const t=n.items.filter((t=>t.type===i));t.length>=c&&(a=t[c-1].html_url)}return a}))}getSyllabus(){return a(this,void 0,void 0,(function*(){if(!("syllabus_body"in this._canvasData)){const t=yield b.getById(this.id,{"include[]":"syllabus_body"});this._canvasData.syllabus_body=t._canvasData.syllabus_body}return this._canvasData.syllabus_body}))}getAssignments(t={fetchConfig:{include:["due_at"]}}){return a(this,void 0,void 0,(function*(){return yield w.getAllInCourse(this,t)}))}getQuizzes(t={include:["due_at"]}){return a(this,void 0,void 0,(function*(){return yield x.getAllInCourse(this,{queryParams:t})}))}getAssociatedCourses(){return a(this,void 0,void 0,(function*(){if(!this.isBlueprint)return null;const t=`courses/${this.id}/blueprint_templates/default/associated_courses`;return(yield f(t,{queryParams:{per_page:50}})).map((t=>new b(t)))}))}getSubsections(){return a(this,void 0,void 0,(function*(){const t=`/api/v1/courses/${this.id}/sections`;return yield g(t)}))}getTabs(){return a(this,void 0,void 0,(function*(){return yield g(`courses/${this.id}/tabs`)}))}getFrontPage(){return a(this,void 0,void 0,(function*(){try{const t=yield d(`${this.contentUrlPath}/front_page`);return new j(t,this)}catch(t){return null}}))}getTab(t){return this._canvasData.tabs.find((e=>e.label===t))||null}setNavigationTabHidden(t,e){return a(this,void 0,void 0,(function*(){const r=this.getTab(t);return r?yield g(`courses/${this.id}/tabs/${r.id}`,{queryParams:{hidden:e}}):null}))}changeSyllabus(t){return a(this,void 0,void 0,(function*(){return this._canvasData.syllabus_body=t,yield g(`courses/${this.id}`,{fetchConfig:{method:"PUT",body:JSON.stringify({"course[syllabus_body]":t})}})}))}getPotentialSections(t){return a(this,void 0,void 0,(function*(){return yield b.getAllByCode(this.baseCode,t)}))}lockBlueprint(){return a(this,void 0,void 0,(function*(){const t=yield this.getModules(),e=[];e.concat(...t.map((t=>[].concat(...t.items))));const r=e.map((t=>a(this,void 0,void 0,(function*(){const e=`${this.contentUrlPath}/blueprint_templates/default/restrict_item`;let{type:r,id:n}=yield function(t){return a(this,void 0,void 0,(function*(){let e,r;if(s.hasOwnProperty(t.type))if(r=s[t.type],"wiki_page"===r){o()(t.url);const r=yield fetch(t.url);r.ok&&(e=(yield r.json()).page_id)}else e=t.content_id;return{type:r,id:e}}))}(t),i={content_type:r,content_id:n,restricted:!0,_method:"PUT"};console.log(i),yield g(e,{fetchConfig:{method:"PUT",body:c(i)}})}))));yield Promise.all(r)}))}setAsBlueprint(){return a(this,void 0,void 0,(function*(){const t=`courses/${this.id}`;this._canvasData=yield d(t,{fetchConfig:{method:"PUT",body:JSON.stringify({"course[blueprint]":!0,"course[use_blueprint_restrictions_by_object_type]":0,"course[blueprint_restrictions][content]":1,"course[blueprint_restrictions][points]":1,"course[blueprint_restrictions][due_dates]":1,"course[blueprint_restrictions][availability_dates]":1})}}),this.resetCache()}))}unsetAsBlueprint(){return a(this,void 0,void 0,(function*(){const t=`courses/${this.id}`;this._canvasData=yield d(t,{fetchConfig:{method:"PUT",body:JSON.stringify({"course[blueprint]":!1})}}),this.resetCache()}))}resetCache(){}publish(){return a(this,void 0,void 0,(function*(){const t=`courses/${this.id}`,e=yield d(t,{fetchConfig:{method:"PUT",body:JSON.stringify({offer:!0})}});console.log(e),this._canvasData=e,this.resetCache()}))}unpublish(){return a(this,void 0,void 0,(function*(){const t=`courses/${this.id}`;yield g(t,{fetchConfig:{method:"PUT",body:JSON.stringify({"course[event]":"claim"})}}),this._canvasData=(yield b.getById(this.id)).rawData}))}contentUpdatesAndFixes(t=null){return a(this,void 0,void 0,(function*(){throw new P}))}reset(t=!0){return a(this,void 0,void 0,(function*(){if(t&&!confirm(`Are you sure you want to reset ${this.courseCode}?`))return!1;const e=`/courses/${this.id}/reset_content`,r=yield d(e,{fetchConfig:{method:"POST"}});return this._canvasData.id=r.id,!1}))}importDevCourse(t=!1,e){return a(this,void 0,void 0,(function*(){const r=yield this.getParentCourse();if(!r)throw new E(`DEV not found for ${this.name}.`);t&&!(yield t(r,this))||(yield this.importCourse(r,e))}))}importCourse(t,e){return a(this,void 0,void 0,(function*(){throw new P}))}getParentCourse(t=!1){return a(this,void 0,void 0,(function*(){let e=yield f(`courses/${this.id}/content_migrations`);if(e.length<1)return console.log("no migrations found"),t?b.getByCode("DEV_"+this.baseCode):null;e.sort(((t,e)=>e.id-t.id));try{for(let t of e){let e=yield b.getById(t.settings.source_course_id);if("DEV"===e.codePrefix)return e}}catch(t){return yield b.getByCode("DEV_"+this.baseCode)}}))}generateHomeTiles(){return a(this,void 0,void 0,(function*(){const t=yield this.getModules(),e=[];for(let r of t)e.push(this.generateHomeTile(r));yield Promise.all(e)}))}generateHomeTile(t){return a(this,void 0,void 0,(function*(){let e=t.items.find((t=>"Page"===t.type&&t.title.toLowerCase().includes("overview")));if(!(null==e?void 0:e.url))return;o()(e.url);const r=e.url.replace(/https:\/\/.*api\/v1/,"/api/v1"),n=yield y(r),a=new j(n,this),s=document.createElement("html");s.innerHTML=a.body;let c=s.querySelector(".cbt-banner-image img");o()(c,"Page has no banner"),yield i.downloads.download({method:"GET",url:c.src})}))}uploadFile(t,e){return a(this,void 0,void 0,(function*(){let r=`/api/v1/courses/${this.id}/files`;t.name;const n={name:t.name,no_redirect:!0,parent_folder:e,on_duplicate:"overwrite"};let i=yield fetch(r,{body:c(n),method:"POST"});o()(i.ok,yield i.json());const a=(yield i.json()).upload_params,s=c(a);s.append("file",t),i=yield fetch(a.url,{body:s}),o()(i.ok,yield i.text())}))}}b.CODE_REGEX=/^(.+[^_])?_?(\w{4}\d{3})/i;class v extends m{constructor(t,e){super(t),this._course=e}static getAllInCourse(t,e){return a(this,void 0,void 0,(function*(){let r=this.getAllUrl(t.id);return(yield f(r,e)).map((e=>new this(e,t)))}))}static clearAddedContentTags(t){let e=t.replace(/<\/?link[^>]*>/g,"");return e=e.replace(/<\/?script[^>]*>/g,""),e}get bodyKey(){return this.myClass._bodyProperty}get body(){return this.bodyKey?this.myClass.clearAddedContentTags(this._canvasData[this.bodyKey]):null}get dueAt(){return this._canvasData.hasOwnProperty("due_at")?new Date(this._canvasData.due_at):null}setDueAt(t){return a(this,void 0,void 0,(function*(){throw new P}))}dueAtTimeDelta(t){return a(this,void 0,void 0,(function*(){if(!this.dueAt)return null;let e=new Date(this.dueAt);return e.setDate(e.getDate()+t),yield this.setDueAt(e)}))}get contentUrlPath(){let t=this.constructor._contentUrlTemplate;return o()(t),t=t.replace("{course_id}",this.course.id.toString()),t=t.replace("{content_id}",this.id.toString()),t}get course(){return this._course}updateContent(t=null,e=null){return a(this,void 0,void 0,(function*(){const r={},n=this.constructor;o()(n._bodyProperty),o()(n._nameProperty);const i=n._nameProperty,a=n._bodyProperty;return t&&a&&(this._canvasData[a]=t,r[a]=t),e&&i&&(this._canvasData[i]=e,r[i]=e),this.saveData(r)}))}delete(){const t=Object.create(null,{delete:{get:()=>super.delete}});return a(this,void 0,void 0,(function*(){return t.delete.call(this)}))}}class A extends v{}A._nameProperty="title",A._bodyProperty="message",A._contentUrlTemplate="courses/{course_id}/discussion_topics/{content_id}",A._allContentUrlTemplate="courses/{course_id}/discussion_topics";class w extends v{setDueAt(t){return a(this,void 0,void 0,(function*(){let e=yield this.saveData({"assignment[due_at]":t.toISOString()});return this._canvasData.due_at=t.toISOString(),e}))}}w._nameProperty="name",w._bodyProperty="description",w._contentUrlTemplate="courses/{course_id}/assignments/{content_id}",w._allContentUrlTemplate="courses/{course_id}/assignments";class x extends v{setDueAt(t){return a(this,void 0,void 0,(function*(){let e=yield this.saveData({"quiz[due_at]":t.toISOString()});return this._canvasData.due_at=t.toISOString(),e}))}}x._nameProperty="title",x._bodyProperty="description",x._contentUrlTemplate="courses/{course_id}/quizzes/{content_id}",x._allContentUrlTemplate="courses/{course_id}/quizzes";class j extends v{getRevisions(){return a(this,void 0,void 0,(function*(){return p(`${this.contentUrlPath}/revisions`)}))}revertLastChangeSet(t=1){return a(this,void 0,void 0,(function*(){let e=yield this.getRevisions();if(e.sort(((t,e)=>e.revision_id-t.revision_id)),e.length<=t)return console.warn(`Tried to revert ${this.name} but there isn't a previous revision`),null;let r=e[t];yield this.applyRevision(r)}))}resetContent(t=1){return a(this,void 0,void 0,(function*(){let e=(yield this.getRevisions()).find((e=>e.revision_id===t));if(!e)throw new Error(`No revision found for ${t}`);yield this.applyRevision(e)}))}applyRevision(t){return a(this,void 0,void 0,(function*(){const e=t.revision_id;let r=yield d(`${this.contentUrlPath}/revisions/${e}?revision_id=${e}`);this._canvasData[this.bodyKey]=r.body,this._canvasData[this.nameKey]=r.title}))}get body(){return this._canvasData[this.bodyKey]}updateContent(t=null,e=null){return a(this,void 0,void 0,(function*(){let r={};return t&&(this._canvasData[this.bodyKey]=t,r["wiki_page[body]"]=t),e&&(this._canvasData[this.nameKey]=e,r[this.nameKey]=e),this.saveData(r)}))}}j._idProperty="page_id",j._nameProperty="title",j._bodyProperty="body",j._contentUrlTemplate="courses/{course_id}/pages/{content_id}",j._allContentUrlTemplate="courses/{course_id}/pages/";class O extends v{associations(t=!1){return a(this,void 0,void 0,(function*(){if("associations"in this._canvasData&&!t)return this._canvasData.associations;let e=(yield this.myClass.getDataById(this.id,this.course,{params:{include:["associations"]}})).associations.map((t=>new _(t,this.course)));return this._canvasData.associations=e,e}))}}O._nameProperty="title",O._contentUrlTemplate="courses/{course_id}/rubrics/{content_id}",O._allContentUrlTemplate="courses/{course_id}/rubrics";class _ extends v{get useForGrading(){return this._canvasData.use_for_grading}setUseForGrading(t){return a(this,void 0,void 0,(function*(){return this._canvasData.use_for_grading=t,yield this.saveData({"rubric_association[use_for_grading]":t})}))}}_._contentUrlTemplate="courses/{course_id}/rubric_associations/{content_id}",_._allContentUrlTemplate="courses/{course_id}/rubric_associations";class S extends m{get code(){return this._canvasData.name}static getTerm(t,e="any",r=void 0){return a(this,void 0,void 0,(function*(){const n=yield this.searchTerms(t,e,r);return!Array.isArray(n)||n.length<=0?null:n[0]}))}static getAllActiveTerms(t=null){return a(this,void 0,void 0,(function*(){return yield this.searchTerms(null,"active",t)}))}static searchTerms(t=null,e="all",r=null){return a(this,void 0,void 0,(function*(){(r=r||{}).queryParams=r.queryParams||{};let n=r.queryParams;e&&(n.workflow_state=e),t&&(n.term_name=t);let o=yield h.getRootAccount(),i=`accounts/${null==o?void 0:o.id}/terms`;const a=yield f(i,r);let s=[];return s.concat(...a.map((t=>[...t.enrollment_terms]))),a&&a.hasOwnProperty("enrollment_terms")?s&&0!==s.length?s.map((t=>new S(t))):null:(console.warn(`No enrollment terms found for ${t}`),null)}))}}class P extends Error{}class E extends Error{}},1135:t=>{t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},9032:(t,e,r)=>{"use strict";var n=r(7244),o=r(8184),i=r(5767),a=r(5680);function s(t){return t.call.bind(t)}var c="undefined"!=typeof BigInt,u="undefined"!=typeof Symbol,l=s(Object.prototype.toString),f=s(Number.prototype.valueOf),p=s(String.prototype.valueOf),y=s(Boolean.prototype.valueOf);if(c)var g=s(BigInt.prototype.valueOf);if(u)var d=s(Symbol.prototype.valueOf);function m(t,e){if("object"!=typeof t)return!1;try{return e(t),!0}catch(t){return!1}}function h(t){return"[object Map]"===l(t)}function b(t){return"[object Set]"===l(t)}function v(t){return"[object WeakMap]"===l(t)}function A(t){return"[object WeakSet]"===l(t)}function w(t){return"[object ArrayBuffer]"===l(t)}function x(t){return"undefined"!=typeof ArrayBuffer&&(w.working?w(t):t instanceof ArrayBuffer)}function j(t){return"[object DataView]"===l(t)}function O(t){return"undefined"!=typeof DataView&&(j.working?j(t):t instanceof DataView)}e.isArgumentsObject=n,e.isGeneratorFunction=o,e.isTypedArray=a,e.isPromise=function(t){return"undefined"!=typeof Promise&&t instanceof Promise||null!==t&&"object"==typeof t&&"function"==typeof t.then&&"function"==typeof t.catch},e.isArrayBufferView=function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):a(t)||O(t)},e.isUint8Array=function(t){return"Uint8Array"===i(t)},e.isUint8ClampedArray=function(t){return"Uint8ClampedArray"===i(t)},e.isUint16Array=function(t){return"Uint16Array"===i(t)},e.isUint32Array=function(t){return"Uint32Array"===i(t)},e.isInt8Array=function(t){return"Int8Array"===i(t)},e.isInt16Array=function(t){return"Int16Array"===i(t)},e.isInt32Array=function(t){return"Int32Array"===i(t)},e.isFloat32Array=function(t){return"Float32Array"===i(t)},e.isFloat64Array=function(t){return"Float64Array"===i(t)},e.isBigInt64Array=function(t){return"BigInt64Array"===i(t)},e.isBigUint64Array=function(t){return"BigUint64Array"===i(t)},h.working="undefined"!=typeof Map&&h(new Map),e.isMap=function(t){return"undefined"!=typeof Map&&(h.working?h(t):t instanceof Map)},b.working="undefined"!=typeof Set&&b(new Set),e.isSet=function(t){return"undefined"!=typeof Set&&(b.working?b(t):t instanceof Set)},v.working="undefined"!=typeof WeakMap&&v(new WeakMap),e.isWeakMap=function(t){return"undefined"!=typeof WeakMap&&(v.working?v(t):t instanceof WeakMap)},A.working="undefined"!=typeof WeakSet&&A(new WeakSet),e.isWeakSet=function(t){return A(t)},w.working="undefined"!=typeof ArrayBuffer&&w(new ArrayBuffer),e.isArrayBuffer=x,j.working="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView&&j(new DataView(new ArrayBuffer(1),0,1)),e.isDataView=O;var _="undefined"!=typeof SharedArrayBuffer?SharedArrayBuffer:void 0;function S(t){return"[object SharedArrayBuffer]"===l(t)}function P(t){return void 0!==_&&(void 0===S.working&&(S.working=S(new _)),S.working?S(t):t instanceof _)}function E(t){return m(t,f)}function k(t){return m(t,p)}function T(t){return m(t,y)}function I(t){return c&&m(t,g)}function D(t){return u&&m(t,d)}e.isSharedArrayBuffer=P,e.isAsyncFunction=function(t){return"[object AsyncFunction]"===l(t)},e.isMapIterator=function(t){return"[object Map Iterator]"===l(t)},e.isSetIterator=function(t){return"[object Set Iterator]"===l(t)},e.isGeneratorObject=function(t){return"[object Generator]"===l(t)},e.isWebAssemblyCompiledModule=function(t){return"[object WebAssembly.Module]"===l(t)},e.isNumberObject=E,e.isStringObject=k,e.isBooleanObject=T,e.isBigIntObject=I,e.isSymbolObject=D,e.isBoxedPrimitive=function(t){return E(t)||k(t)||T(t)||I(t)||D(t)},e.isAnyArrayBuffer=function(t){return"undefined"!=typeof Uint8Array&&(x(t)||P(t))},["isProxy","isExternal","isModuleNamespaceObject"].forEach((function(t){Object.defineProperty(e,t,{enumerable:!1,value:function(){throw new Error(t+" is not supported in userland")}})}))},537:(t,e,r)=>{var n=Object.getOwnPropertyDescriptors||function(t){for(var e=Object.keys(t),r={},n=0;n<e.length;n++)r[e[n]]=Object.getOwnPropertyDescriptor(t,e[n]);return r},o=/%[sdj%]/g;e.format=function(t){if(!b(t)){for(var e=[],r=0;r<arguments.length;r++)e.push(c(arguments[r]));return e.join(" ")}r=1;for(var n=arguments,i=n.length,a=String(t).replace(o,(function(t){if("%%"===t)return"%";if(r>=i)return t;switch(t){case"%s":return String(n[r++]);case"%d":return Number(n[r++]);case"%j":try{return JSON.stringify(n[r++])}catch(t){return"[Circular]"}default:return t}})),s=n[r];r<i;s=n[++r])m(s)||!w(s)?a+=" "+s:a+=" "+c(s);return a},e.deprecate=function(t,r){if("undefined"!=typeof process&&!0===process.noDeprecation)return t;if("undefined"==typeof process)return function(){return e.deprecate(t,r).apply(this,arguments)};var n=!1;return function(){if(!n){if(process.throwDeprecation)throw new Error(r);process.traceDeprecation?console.trace(r):console.error(r),n=!0}return t.apply(this,arguments)}};var i={},a=/^$/;if({}.NODE_DEBUG){var s={}.NODE_DEBUG;s=s.replace(/[|\\{}()[\]^$+?.]/g,"\\$&").replace(/\*/g,".*").replace(/,/g,"$|^").toUpperCase(),a=new RegExp("^"+s+"$","i")}function c(t,r){var n={seen:[],stylize:l};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),d(r)?n.showHidden=r:r&&e._extend(n,r),v(n.showHidden)&&(n.showHidden=!1),v(n.depth)&&(n.depth=2),v(n.colors)&&(n.colors=!1),v(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=u),f(n,t,n.depth)}function u(t,e){var r=c.styles[e];return r?"["+c.colors[r][0]+"m"+t+"["+c.colors[r][1]+"m":t}function l(t,e){return t}function f(t,r,n){if(t.customInspect&&r&&O(r.inspect)&&r.inspect!==e.inspect&&(!r.constructor||r.constructor.prototype!==r)){var o=r.inspect(n,t);return b(o)||(o=f(t,o,n)),o}var i=function(t,e){if(v(e))return t.stylize("undefined","undefined");if(b(e)){var r="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(r,"string")}return h(e)?t.stylize(""+e,"number"):d(e)?t.stylize(""+e,"boolean"):m(e)?t.stylize("null","null"):void 0}(t,r);if(i)return i;var a=Object.keys(r),s=function(t){var e={};return t.forEach((function(t,r){e[t]=!0})),e}(a);if(t.showHidden&&(a=Object.getOwnPropertyNames(r)),j(r)&&(a.indexOf("message")>=0||a.indexOf("description")>=0))return p(r);if(0===a.length){if(O(r)){var c=r.name?": "+r.name:"";return t.stylize("[Function"+c+"]","special")}if(A(r))return t.stylize(RegExp.prototype.toString.call(r),"regexp");if(x(r))return t.stylize(Date.prototype.toString.call(r),"date");if(j(r))return p(r)}var u,l="",w=!1,_=["{","}"];return g(r)&&(w=!0,_=["[","]"]),O(r)&&(l=" [Function"+(r.name?": "+r.name:"")+"]"),A(r)&&(l=" "+RegExp.prototype.toString.call(r)),x(r)&&(l=" "+Date.prototype.toUTCString.call(r)),j(r)&&(l=" "+p(r)),0!==a.length||w&&0!=r.length?n<0?A(r)?t.stylize(RegExp.prototype.toString.call(r),"regexp"):t.stylize("[Object]","special"):(t.seen.push(r),u=w?function(t,e,r,n,o){for(var i=[],a=0,s=e.length;a<s;++a)E(e,String(a))?i.push(y(t,e,r,n,String(a),!0)):i.push("");return o.forEach((function(o){o.match(/^\d+$/)||i.push(y(t,e,r,n,o,!0))})),i}(t,r,n,s,a):a.map((function(e){return y(t,r,n,s,e,w)})),t.seen.pop(),function(t,e,r){return t.reduce((function(t,e){return e.indexOf("\n"),t+e.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?r[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+r[1]:r[0]+e+" "+t.join(", ")+" "+r[1]}(u,l,_)):_[0]+l+_[1]}function p(t){return"["+Error.prototype.toString.call(t)+"]"}function y(t,e,r,n,o,i){var a,s,c;if((c=Object.getOwnPropertyDescriptor(e,o)||{value:e[o]}).get?s=c.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):c.set&&(s=t.stylize("[Setter]","special")),E(n,o)||(a="["+o+"]"),s||(t.seen.indexOf(c.value)<0?(s=m(r)?f(t,c.value,null):f(t,c.value,r-1)).indexOf("\n")>-1&&(s=i?s.split("\n").map((function(t){return"  "+t})).join("\n").slice(2):"\n"+s.split("\n").map((function(t){return"   "+t})).join("\n")):s=t.stylize("[Circular]","special")),v(a)){if(i&&o.match(/^\d+$/))return s;(a=JSON.stringify(""+o)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.slice(1,-1),a=t.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),a=t.stylize(a,"string"))}return a+": "+s}function g(t){return Array.isArray(t)}function d(t){return"boolean"==typeof t}function m(t){return null===t}function h(t){return"number"==typeof t}function b(t){return"string"==typeof t}function v(t){return void 0===t}function A(t){return w(t)&&"[object RegExp]"===_(t)}function w(t){return"object"==typeof t&&null!==t}function x(t){return w(t)&&"[object Date]"===_(t)}function j(t){return w(t)&&("[object Error]"===_(t)||t instanceof Error)}function O(t){return"function"==typeof t}function _(t){return Object.prototype.toString.call(t)}function S(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(t){if(t=t.toUpperCase(),!i[t])if(a.test(t)){var r=process.pid;i[t]=function(){var n=e.format.apply(e,arguments);console.error("%s %d: %s",t,r,n)}}else i[t]=function(){};return i[t]},e.inspect=c,c.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},c.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.types=r(9032),e.isArray=g,e.isBoolean=d,e.isNull=m,e.isNullOrUndefined=function(t){return null==t},e.isNumber=h,e.isString=b,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=v,e.isRegExp=A,e.types.isRegExp=A,e.isObject=w,e.isDate=x,e.types.isDate=x,e.isError=j,e.types.isNativeError=j,e.isFunction=O,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=r(1135);var P=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function E(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){var t,r;console.log("%s - %s",(r=[S((t=new Date).getHours()),S(t.getMinutes()),S(t.getSeconds())].join(":"),[t.getDate(),P[t.getMonth()],r].join(" ")),e.format.apply(e,arguments))},e.inherits=r(6698),e._extend=function(t,e){if(!e||!w(e))return t;for(var r=Object.keys(e),n=r.length;n--;)t[r[n]]=e[r[n]];return t};var k="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function T(t,e){if(!t){var r=new Error("Promise was rejected with a falsy value");r.reason=t,t=r}return e(t)}e.promisify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');if(k&&t[k]){var e;if("function"!=typeof(e=t[k]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(e,k,{value:e,enumerable:!1,writable:!1,configurable:!0}),e}function e(){for(var e,r,n=new Promise((function(t,n){e=t,r=n})),o=[],i=0;i<arguments.length;i++)o.push(arguments[i]);o.push((function(t,n){t?r(t):e(n)}));try{t.apply(this,o)}catch(t){r(t)}return n}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),k&&Object.defineProperty(e,k,{value:e,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(e,n(t))},e.promisify.custom=k,e.callbackify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');function e(){for(var e=[],r=0;r<arguments.length;r++)e.push(arguments[r]);var n=e.pop();if("function"!=typeof n)throw new TypeError("The last argument must be of type Function");var o=this,i=function(){return n.apply(o,arguments)};t.apply(this,e).then((function(t){process.nextTick(i.bind(null,null,t))}),(function(t){process.nextTick(T.bind(null,t,i))}))}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),Object.defineProperties(e,n(t)),e}},6815:function(t,e){var r,n;"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self&&self,r=function(t){"use strict";if(!globalThis.chrome?.runtime?.id)throw new Error("This script should only be loaded in a browser extension.");if(void 0===globalThis.browser||Object.getPrototypeOf(globalThis.browser)!==Object.prototype){const e="The message port closed before a response was received.",r=t=>{const r={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0},elements:{createSidebarPane:{minArgs:1,maxArgs:1}}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},goBack:{minArgs:0,maxArgs:1},goForward:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(0===Object.keys(r).length)throw new Error("api-metadata.json has not been included in browser-polyfill");class n extends WeakMap{constructor(t,e=void 0){super(e),this.createItem=t}get(t){return this.has(t)||this.set(t,this.createItem(t)),super.get(t)}}const o=(e,r)=>(...n)=>{t.runtime.lastError?e.reject(new Error(t.runtime.lastError.message)):r.singleCallbackArg||n.length<=1&&!1!==r.singleCallbackArg?e.resolve(n[0]):e.resolve(n)},i=t=>1==t?"argument":"arguments",a=(t,e,r)=>new Proxy(e,{apply:(e,n,o)=>r.call(n,t,...o)});let s=Function.call.bind(Object.prototype.hasOwnProperty);const c=(t,e={},r={})=>{let n=Object.create(null),u={has:(e,r)=>r in t||r in n,get(u,l,f){if(l in n)return n[l];if(!(l in t))return;let p=t[l];if("function"==typeof p)if("function"==typeof e[l])p=a(t,t[l],e[l]);else if(s(r,l)){let e=((t,e)=>function(r,...n){if(n.length<e.minArgs)throw new Error(`Expected at least ${e.minArgs} ${i(e.minArgs)} for ${t}(), got ${n.length}`);if(n.length>e.maxArgs)throw new Error(`Expected at most ${e.maxArgs} ${i(e.maxArgs)} for ${t}(), got ${n.length}`);return new Promise(((i,a)=>{if(e.fallbackToNoCallback)try{r[t](...n,o({resolve:i,reject:a},e))}catch(o){console.warn(`${t} API method doesn't seem to support the callback parameter, falling back to call it without a callback: `,o),r[t](...n),e.fallbackToNoCallback=!1,e.noCallback=!0,i()}else e.noCallback?(r[t](...n),i()):r[t](...n,o({resolve:i,reject:a},e))}))})(l,r[l]);p=a(t,t[l],e)}else p=p.bind(t);else if("object"==typeof p&&null!==p&&(s(e,l)||s(r,l)))p=c(p,e[l],r[l]);else{if(!s(r,"*"))return Object.defineProperty(n,l,{configurable:!0,enumerable:!0,get:()=>t[l],set(e){t[l]=e}}),p;p=c(p,e[l],r["*"])}return n[l]=p,p},set:(e,r,o,i)=>(r in n?n[r]=o:t[r]=o,!0),defineProperty:(t,e,r)=>Reflect.defineProperty(n,e,r),deleteProperty:(t,e)=>Reflect.deleteProperty(n,e)},l=Object.create(t);return new Proxy(l,u)},u=t=>({addListener(e,r,...n){e.addListener(t.get(r),...n)},hasListener:(e,r)=>e.hasListener(t.get(r)),removeListener(e,r){e.removeListener(t.get(r))}}),l=new n((t=>"function"!=typeof t?t:function(e){const r=c(e,{},{getContent:{minArgs:0,maxArgs:0}});t(r)})),f=new n((t=>"function"!=typeof t?t:function(e,r,n){let o,i,a=!1,s=new Promise((t=>{o=function(e){a=!0,t(e)}}));try{i=t(e,r,o)}catch(t){i=Promise.reject(t)}const c=!0!==i&&((u=i)&&"object"==typeof u&&"function"==typeof u.then);var u;if(!0!==i&&!c&&!a)return!1;return(c?i:s).then((t=>{n(t)}),(t=>{let e;e=t&&(t instanceof Error||"string"==typeof t.message)?t.message:"An unexpected error occurred",n({__mozWebExtensionPolyfillReject__:!0,message:e})})).catch((t=>{console.error("Failed to send onMessage rejected reply",t)})),!0})),p=({reject:r,resolve:n},o)=>{t.runtime.lastError?t.runtime.lastError.message===e?n():r(new Error(t.runtime.lastError.message)):o&&o.__mozWebExtensionPolyfillReject__?r(new Error(o.message)):n(o)},y=(t,e,r,...n)=>{if(n.length<e.minArgs)throw new Error(`Expected at least ${e.minArgs} ${i(e.minArgs)} for ${t}(), got ${n.length}`);if(n.length>e.maxArgs)throw new Error(`Expected at most ${e.maxArgs} ${i(e.maxArgs)} for ${t}(), got ${n.length}`);return new Promise(((t,e)=>{const o=p.bind(null,{resolve:t,reject:e});n.push(o),r.sendMessage(...n)}))},g={devtools:{network:{onRequestFinished:u(l)}},runtime:{onMessage:u(f),onMessageExternal:u(f),sendMessage:y.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:y.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},d={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return r.privacy={network:{"*":d},services:{"*":d},websites:{"*":d}},c(t,g,r)};t.exports=r(chrome)}else t.exports=globalThis.browser},void 0===(n=r.apply(e,[t]))||(t.exports=n)},5767:(t,e,r)=>{"use strict";var n=r(2682),o=r(9209),i=r(487),a=r(8075),s=r(5795),c=a("Object.prototype.toString"),u=r(9092)(),l="undefined"==typeof globalThis?r.g:globalThis,f=o(),p=a("String.prototype.slice"),y=Object.getPrototypeOf,g=a("Array.prototype.indexOf",!0)||function(t,e){for(var r=0;r<t.length;r+=1)if(t[r]===e)return r;return-1},d={__proto__:null};n(f,u&&s&&y?function(t){var e=new l[t];if(Symbol.toStringTag in e){var r=y(e),n=s(r,Symbol.toStringTag);if(!n){var o=y(r);n=s(o,Symbol.toStringTag)}d["$"+t]=i(n.get)}}:function(t){var e=new l[t],r=e.slice||e.set;r&&(d["$"+t]=i(r))}),t.exports=function(t){if(!t||"object"!=typeof t)return!1;if(!u){var e=p(c(t),8,-1);return g(f,e)>-1?e:"Object"===e&&function(t){var e=!1;return n(d,(function(r,n){if(!e)try{r(t),e=p(n,1)}catch(t){}})),e}(t)}return s?function(t){var e=!1;return n(d,(function(r,n){if(!e)try{"$"+r(t)===n&&(e=p(n,1))}catch(t){}})),e}(t):null}},9209:(t,e,r)=>{"use strict";var n=r(6578),o="undefined"==typeof globalThis?r.g:globalThis;t.exports=function(){for(var t=[],e=0;e<n.length;e++)"function"==typeof o[n[e]]&&(t[t.length]=n[e]);return t}}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={exports:{}};return t[n].call(i.exports,i,i.exports,r),i.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t,e,n=r(5722),o=r(4148),i=r.n(o);e=function*(){const t=yield n.x1.getAllActiveTerms();i()(t);let e=t.find((t=>t.name.search(/DE8W/))),r=t.find((t=>t.name.search(/DE(\/?HL)?-\s{3}-\d+-\d+/))),o=document.getElementById("termFilter");console.log(o),console.log(t),console.log(e),console.log(r)},new((t=void 0)||(t=Promise))((function(r,n){function o(t){try{a(e.next(t))}catch(t){n(t)}}function i(t){try{a(e.throw(t))}catch(t){n(t)}}function a(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(t){t(n)}))).then(o,i)}a((e=e.apply(void 0,[])).next())}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,